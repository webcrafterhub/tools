// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url       = env("MONGO_DB_STRING") // uses connection pooling
}

model Form {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  createdAt   DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  content     String   @default("[]")

  visits      Int @default(0)
  submissions Int @default(0)

  shareURL        String            @unique @default(uuid())
  FormSubmissions FormSubmissions[]

  @@unique([name, userId])

  
}

model FormSubmissions {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  formId    String
  form      Form     @relation(fields: [formId], references: [id])

  content String
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  phoneNumber String?
  companyName String?
  password String?
  emailVerified DateTime?
  subscriptionEndDate DateTime?
  image String?
  accounts Account[]
  role UserRole @default(USER)
  subscriptionType SubscriptionPlan @default(BASIC)
  accountStatus AccountStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String 
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  token      String
  expires    DateTime
}
model ResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  token      String
  expires    DateTime
}


enum UserRole {
  ADMIN
  USER
}

enum SubscriptionPlan {
  BASIC
  PREMIUM

}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}



